<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

  <!-- to setup the database -->
  <bean id="databaseBean" class="camelinaction.DatabaseBean"
        init-method="setupDatabase" destroy-method="dropDatabase">
    <property name="dataSource" ref="myDataSource"/>
  </bean>

  <!-- a bean for transforming incoming partner reports to SQL statements -->
  <bean id="partner" class="camelinaction.PartnerServiceBean"/>

  <!-- Camel and the route used -->
  <camelContext id="partnerCamel" xmlns="http://camel.apache.org/schema/blueprint">

    <!-- externalize the sql statement in properties files -->
    <propertyPlaceholder id="properties" location="camelinaction/sql.properties"/>

    <route id="partnerToDB">
      <from uri="activemq:queue:partners"/>
      <!-- configure the route to be transacted -->
      <transacted/>
      <log message="incoming message ${body}"/>
      <bean ref="partner" method="toMap"/>
      <to uri="sql:{{sql-insert}}?dataSource=#myDataSource"/>
      <log message="inserted into database"/>
    </route>
  </camelContext>

  <!-- define the activemq Camel component so we can integrate with the AMQ broker -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <!-- due to a bug in activemq-camel we must configure using a nested configuration bean -->
    <property name="configuration">
      <bean class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="jmsXaPoolConnectionFactory"/>
        <!-- JTA transaction manager (Spring interface to Aries-TM) -->
        <property name="transactionManager" ref="springJtaTxManager"/>
        <!-- IMPORTANT: We set local transactions to false, because the JtaTransactionManager
             will take care of enrolling the XA JMS Connection when needed. -->
        <property name="transacted" value="false"/>
        <!-- IMPORTANT: and disable cache level as the JtaTransactionManager needs to control the consumers
             from its JcaPooledConnectionFactory -->
        <property name="cacheLevelName" value="CACHE_NONE"/>
      </bean>
    </property>
  </bean>

  <!-- plain javax.transaction.TransactionManager is not enough to do recovery for ActiveMQ -->
  <reference id="jtaTxManager" interface="org.apache.geronimo.transaction.manager.RecoverableTransactionManager"/>
  <!-- aries-transaction-manager registers this interface if it finds the org.springframework.transaction.PlatformTransactionManager class -->
  <reference id="springJtaTxManager" interface="org.springframework.transaction.PlatformTransactionManager"/>

  <!-- the ConnectionFactory to connect to the JMS broker -->
  <bean id="activeMqXaConnectionFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory">
    <!-- connection to the remote ActiveMQ broker -->
    <property name="brokerURL" value="tcp://localhost:61616"/>
  </bean>

  <!-- pool the connection factory so it runs faster -->
  <!-- and use JCA so it works with JTA/XA -->
  <bean id="jmsXaPoolConnectionFactory" class="org.apache.activemq.pool.JcaPooledConnectionFactory">
    <property name="name" value="activemq.default"/>
    <property name="maxConnections" value="8"/>
    <property name="transactionManager" ref="jtaTxManager"/>
    <property name="connectionFactory" ref="activeMqXaConnectionFactory"/>
  </bean>

  <!-- A ResourceManager is needed for every transactional resource in order to
       recover any outstanding transactions after a crash.
       It will register with the Aries transaction manager, which then calls
       recoverResource() on the transactional resource itself. -->
  <bean id="resourceManager" class="org.apache.activemq.jms.pool.GenericResourceManager" init-method="recoverResource">
    <property name="transactionManager" ref="jtaTxManager"/>
    <property name="connectionFactory" ref="jmsXaPoolConnectionFactory"/>
    <property name="resourceName" value="activemq.default"/>
    <property name="userName" value="karaf"/>
    <property name="password" value="karaf"/>
  </bean>

  <!-- define the datasource to the database - in this example we use an in memory database using Derby -->
  <!-- in a real world scenarios you should look for a better JDBC connection pool than Apache DBCP -->
  <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource"/>
    <property name="url" value="jdbc:derby:memory:order;create=true"/>
  </bean>

</blueprint>
