<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:broker="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <!-- a bean for transforming incoming partner reports to SQL statements -->
  <bean id="partner" class="camelinaction.PartnerServiceBean"/>

  <!-- Camel and the route used -->
  <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

    <!-- externalize the sql statement in properties files -->
    <propertyPlaceholder id="properties" location="camelinaction/sql.properties"/>

    <route id="partnerToDB">
      <from uri="activemq:queue:partners"/>
      <!-- configure the route to be transacted -->
      <transacted/>
      <bean ref="partner" method="toMap"/>
      <to uri="sql:{{sql-insert}}?dataSource=#myDataSource"/>
    </route>
  </camelContext>

  <!-- define the activemq Camel component so we can integrate with the AMQ broker below -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <!-- must indicate that we use transacted acknowledge mode -->
    <property name="transacted" value="true"/>
    <!-- refer to the transaction manager -->
    <property name="transactionManager" ref="txManager"/>
    <!-- important: enable caching as we are using ActiveMQ which safely can do this -->
    <!-- see more at: http://camel.apache.org/jms -->
    <property name="cacheLevelName" value="CACHE_CONSUMER"/>
  </bean>

  <!-- the transaction manager which is a Spring JMS TransactionManager -->
  <bean id="txManager" class="org.springframework.jms.connection.JmsTransactionManager">
    <!-- must know how to connect to the JMS Broker so refer to a connection factory -->
    <property name="connectionFactory" ref="jmsConnectionFactory"/>
  </bean>

  <!-- the ConnectionFactory to connect to the JMS broker -->
  <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616"/>
  </bean>

  <!-- setup a local JMS Broker for testing purpose -->
  <broker:broker useJmx="false" persistent="false" brokerName="myBroker">
    <broker:transportConnectors>
      <broker:transportConnector uri="tcp://localhost:61616"/>
    </broker:transportConnectors>
  </broker:broker>

  <!-- define the datasource to the database - in this example we use an in memory database using Derby -->
  <bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource"/>
    <property name="url" value="jdbc:derby:memory:order;create=true"/>
  </bean>

</beans>
