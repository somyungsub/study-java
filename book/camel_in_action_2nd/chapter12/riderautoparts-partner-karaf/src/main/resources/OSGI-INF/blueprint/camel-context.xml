<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

  <!-- to setup the database -->
  <bean id="databaseBean" class="camelinaction.DatabaseBean"
        init-method="setupDatabase" destroy-method="dropDatabase">
    <property name="dataSource" ref="myDataSource"/>
  </bean>

  <!-- a bean for transforming incoming partner reports to SQL statements -->
  <bean id="partner" class="camelinaction.PartnerServiceBean"/>

  <!-- Camel and the route used -->
  <camelContext id="partnerCamel" xmlns="http://camel.apache.org/schema/blueprint">

    <!-- externalize the sql statement in properties files -->
    <propertyPlaceholder id="properties" location="camelinaction/sql.properties"/>

    <route id="partnerToDB">
      <from uri="activemq:queue:partners"/>
      <!-- configure the route to be transacted -->
      <transacted/>
      <log message="incoming message ${body}"/>
      <bean ref="partner" method="toMap"/>
      <to uri="sql:{{sql-insert}}?dataSource=#myDataSource"/>
      <log message="inserted into database"/>
    </route>
  </camelContext>

  <!-- define the activemq Camel component so we can integrate with the AMQ broker -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <!-- due to a bug in activemq-camel we must configure using a nested configuration bean
         when we want to configured userName/password -->
    <property name="configuration">
      <bean class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="transactionManager" ref="txManager"/>
        <property name="transacted" value="true"/>
        <property name="cacheLevelName" value="CACHE_CONSUMER"/>
      </bean>
    </property>
  </bean>

  <!-- the transaction manager which is a Spring JMS TransactionManager -->
  <bean id="txManager" class="org.springframework.jms.connection.JmsTransactionManager">
    <!-- must know how to connect to the JMS Broker so refer to a connection factory -->
    <property name="connectionFactory" ref="pooledConnectionFactory"/>
  </bean>

  <!-- the ConnectionFactory to connect to the JMS broker -->
  <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="vm://localhost"/>
    <!-- when running in karaf the default ActiveMQ broker requires login with karaf/karaf -->
    <property name="userName" value="karaf"/>
    <property name="password" value="karaf"/>
  </bean>

  <!-- pool the connection factory so it runs faster -->
  <bean id="pooledConnectionFactory"
        class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
    <property name="maxConnections" value="8"/>
    <property name="connectionFactory" ref="jmsConnectionFactory"/>
  </bean>

  <!-- define the datasource to the database - in this example we use an in memory database using Derby -->
  <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource"/>
    <property name="url" value="jdbc:derby:memory:order;create=true"/>
  </bean>

</blueprint>
