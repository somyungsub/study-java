<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:broker="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <!-- Important:
       note we must have Spring startup the embedded broker first, which we must do using
       depends-on attribute in the spring bean tags
  -->

  <!-- setup Atomikos for XA transaction -->
  <bean id="atomikosTransactionManager"
        class="com.atomikos.icatch.jta.UserTransactionManager"
        init-method="init" destroy-method="close" depends-on="my-broker">
    <!-- when close is called, should we force transactions to terminate or not? -->
    <property name="forceShutdown" value="false"/>
  </bean>

  <!-- this is some atomikos setup you must do -->
  <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp" depends-on="my-broker">
    <property name="transactionTimeout" value="300"/>
  </bean>

  <!-- this is some atomikos setup you must do -->
  <bean id="connectionFactory"
        class="com.atomikos.jms.AtomikosConnectionFactoryBean" depends-on="my-broker">
    <property name="uniqueResourceName" value="amq1"/>
    <property name="xaConnectionFactory" ref="jmsXaConnectionFactory"/>
  </bean>

  <!-- this is the Spring JtaTransactionManager which under the hood uses Atomikos -->
  <bean id="jtaTransactionManager"
        class="org.springframework.transaction.jta.JtaTransactionManager" depends-on="my-broker">
    <property name="transactionManager" ref="atomikosTransactionManager"/>
    <property name="userTransaction" ref="atomikosUserTransaction"/>
  </bean>

  <!-- Is the ConnectionFactory to connect to the JMS broker -->
  <!-- notice how we must use the XA connection factory -->
  <bean id="jmsXaConnectionFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory" depends-on="my-broker">
    <property name="brokerURL" value="tcp://localhost:61616"/>
  </bean>

  <!-- define the activemq Camel component so we can integrate with the AMQ broker below -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" depends-on="my-broker">
    <!-- must indicate that we use transacted acknowledge mode -->
    <property name="transacted" value="true"/>
    <!-- refer to the transaction manager -->
    <property name="transactionManager" ref="jtaTransactionManager"/>
    <!-- important: enable caching as we are using ActiveMQ which safely can do this -->
    <!-- see more at: http://camel.apache.org/jms -->
    <property name="cacheLevelName" value="CACHE_CONSUMER"/>
  </bean>

  <!-- setup a local JMS Broker for testing purpose -->
  <broker:broker id="my-broker" useJmx="false" persistent="false" brokerName="myBroker">
    <broker:transportConnectors>
      <broker:transportConnector uri="tcp://localhost:61616"/>
    </broker:transportConnectors>
  </broker:broker>

  <!-- this is the JDBC data source which uses an in-memory only Apache Derby database -->
  <!-- as we use the embedded database we use Atomikos to wrap it for XA support
       if you use an external database, then you can configure the XADataSource of that database without wrapping using Atomikos -->
  <bean id="myDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="bookorders"/>
    <property name="xaDataSourceClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource"/>
    <property name="minPoolSize" value="1"/>
    <property name="maxPoolSize" value="5"/>
    <property name="xaProperties">
      <props>
        <prop key="databaseName">memory:bookorders;create=true</prop>
      </props>
    </property>
  </bean>

  <!-- required transaction propagation -->
  <bean id="required" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jtaTransactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
  </bean>

  <!-- requires new transaction propagation -->
  <bean id="requiresNew" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jtaTransactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
  </bean>

  <!-- mandatory new transaction propagation -->
  <bean id="mandatory" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jtaTransactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_MANDATORY"/>
  </bean>

  <!-- the bean for the audit-log service -->
  <bean id="auditLogService" class="camelinaction.AuditLogService">
    <property name="dataSource" ref="myDataSource"/>
  </bean>

  <!-- the bean for the order service -->
  <bean id="orderService" class="camelinaction.OrderService">
    <property name="dataSource" ref="myDataSource"/>
  </bean>

</beans>
